/* autogenerated by Processing revision 1293 on 2024-05-07 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import processing.sound.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Juego extends PApplet {

float suelo = 480; // Posición del suelo
PImage CantAgua;


class Escena_Juego { ////////////////////////////////////////////////////////////// Escena del videojuego

  PImage corazon;
  int UlFoto=0;
  int vidas=3;
  ArrayList<Jugador>  Jugadores = new ArrayList<Jugador>();
  Coin coin;
  PImage CountAguas;
  Obstaculos obstaculosEscena = new Obstaculos();
  boolean pausa = false;
  PImage Escenario;
  float suelo = 480; // Posición del suelo

  int TiempoInicio;
  int TiempoTranscurrido;
  boolean  boleaColision=false;
  
  int Tiempo_Pausa ;
  int Tiempo_Pausa_Inicio=0;

  // Setter para la variable "personaje"





  public void draw () {

    if (pausa == false) {


      background(255);

      image(Escenario, 0, 0 ); //Escenario
      image(piso, 0, 450); // Piso

      obstaculosEscena.draw();

      for (int j =0; j < Jugadores.size(); j++) {//Preguntar por cada jugador

        coin.TomoAgua(Jugadores.get(j).xpos, Jugadores.get(j).Width_Personaje_Principal, Jugadores.get(j).ypos, Jugadores.get(j).Height_Personaje_Principal);

        if (obstaculosEscena.Chocaron(Jugadores.get(j).xpos, Jugadores.get(j).Width_Personaje_Principal, Jugadores.get(j).ypos, Jugadores.get(j).Height_Personaje_Principal, this.boleaColision)) {
          this.vidas=this.vidas-1;
          this.UlFoto=frameCount;
          boleaColision=true;
          ColisionRec=true;
      ColisionPlaying=false;
          ColisionSonido();
    ColisionRec=false;
          
        }
        Jugadores.get(j).draw();
      }

      /*for(int j =0; j < Jugadores.size() ; j++){//Preguntar por cada Jugador si tomo agua
       coin.TomoAgua(Jugadores.get(j).xpos,Jugadores.get(j).Width_Personaje_Principal,Jugadores.get(j).ypos,Jugadores.get(j).Height_Personaje_Principal);
       }*/

      if (frameCount-this.UlFoto>=40) {
        boleaColision=false;
      }
      //aquí verá cuando se acaben las 3 vidas
      if (this.vidas==0) {
        println(name_to_score);
        S_Scores.actualizar(name_to_score,this.coin.coinsRecaudadas);
        
        
        textSize(32);
        fill(255, 0, 0);
        text("¡GAME OVER! :(", width/2 - 150, height/2);
         fill(255,255, 255);
        text("Para reiniciar oprime R", width/2 - 150, suelo-30);
        text("Para terminar oprime K", width/2 - 150, suelo);
        Escena1=false;
        Recovery = true;
        
      } 




      /////// hasta aqui escenario y persona

      this.TiempoInicio = this.TiempoInicio + this.Tiempo_Pausa;
      this.Tiempo_Pausa =0;

    

      TiempoTranscurrido = millis() - (TiempoInicio+ this.Tiempo_Pausa );


      int Segundos = PApplet.parseInt(TiempoTranscurrido / 1000.0f);


      int centiSegundos = PApplet.parseInt((TiempoTranscurrido % 1000) / 10.0f);
      textSize(40);
      fill(0);
      fill(255, 255, 255);
      String TiempoParaMostrar = nf(Segundos, 2) + ":" + nf(centiSegundos, 2);
      text(TiempoParaMostrar, 10, 35);


      fill(255, 255, 255);
      this.coin.display();
      image(CountAguas, 1200-112, 15);/*47*/
      text(nf(this.coin.coinsRecaudadas, 2), 1200-112+50, 45);
      
      text("Pulsa P para pausar",width/3, 580);

      //// Se aumentan las vidas
      if(confirmar_vida==true){
        vidas=vidas+1;
        confirmar_vida=false;
      }
      if(vidas>3){
        vidas=3;
      }
      corazon.resize(50, 40);
      image(corazon, (width/2)-30, 10);
      textSize(40);
      fill(0);
      fill(255,255, 255);
      text(vidas, (width/2)+10, 42);

      PFont mono;
      mono = createFont("PoetsenOne-Regular.ttf", 38);
      textFont(mono);



      /*if (this.coin.coinsRecaudadas%5 == 0 && this.coin.coinsRecaudadas!=0 ){
       this.vidas = this.vidas +1 ;
       
       }*/
       
       if(Segundos==100){
        textSize(32);
        fill(255, 0, 0);
        text("¡GANASTE! :)", width/2 - 150, height/2);
        text("Para reiniciar oprime R", width/2 - 150, suelo-30);
        text("Para terminar oprime K", width/2 - 150, suelo);
        Escena1=false;
        Recovery = true;
       }
    }else{
      
     this.Tiempo_Pausa = millis() - Tiempo_Pausa_Inicio;
     println(this.Tiempo_Pausa);
    
    }
      
  }


  public void setPersonaje(ArrayList<PImage> Personajes_Elegidos) {
    this.coin =new Coin();
    this.CountAguas = loadImage("CountCoins.png");
    for (int k = 0; k< Personajes_Elegidos.size(); k++ )

      Jugadores.add(new Jugador(Personajes_Elegidos.get(k), k)   );
  }

  // Setter para la variable "escenario"
  public void setEscenario(PImage escenario) {
    this.Escenario = escenario;
    Escenario.resize(width, 450);
    text(vidas, 1160, 42);
    piso = loadImage("data/Suelo.png"); // Piso
    piso.resize(1200, 400); // Piso
    TiempoInicio = millis();
    corazon=loadImage("corazon.png");
  }







  public void keyPressed() {

    for (int j =0; j < Jugadores.size(); j++) {//Preguntar por cada Jugador

      Jugadores.get(j).keyPressed();
    }

    if (keyCode=='p' | keyCode=='P') {
      text("Pausado",width/2-60, 300);
      
       if(pausa == false ){
           Tiempo_Pausa_Inicio=millis ();
       }
    
      this.pausa=! pausa;
      

    }
  }

  public void keyReleased() {
    for (int j =0; j < Jugadores.size(); j++) {//Preguntar por cada Jugador

      Jugadores.get(j).keyReleased();
    }
  }
}

















class Obstaculos {




  ArrayList<Obstaculo> obstaculos = new ArrayList<Obstaculo>();

  float TasaNuevosObstaculos = 140;

  int TiempoInicio = millis();
  int TiempoTranscurrido;

Obstaculos(){
    ArrayList<Obstaculo> obstaculos = new ArrayList<Obstaculo>();

this.TasaNuevosObstaculos = 150;
}


  public void draw() {

    for (int i = obstaculos.size() - 1; i >= 0; i--) {
      this.obstaculos.get(i).display();
      this.obstaculos.get(i).update();
      if (this.obstaculos.get(i).x < -40 ) { // Eliminar el obstaculo si sale de la pantalla
        this.obstaculos.remove(i);
      }
    }
    
      TiempoTranscurrido = millis() - TiempoInicio;
      int Segundos = PApplet.parseInt(TiempoTranscurrido / 1000.0f);

    if (frameCount % TasaNuevosObstaculos == 0 ) {


      this.TasaNuevosObstaculos = this.TasaNuevosObstaculos;

print( TasaNuevosObstaculos);

      if ( PApplet.parseInt(random(2))  == 0 ) {

        Gato gatico = new Gato(1200, suelo,  5+(PApplet.parseInt(floor(Segundos/15))));
        this.obstaculos.add(gatico);
      } else {
        Iguana iguana = new Iguana(1200+400-400, suelo-511, 5+(PApplet.parseInt(floor(Segundos/15))));
        this.obstaculos.add(iguana);
      }
    }
  }

  public boolean  Chocaron(float xPersonaje, int anchoPersonaje, float yPersonaje, int altoPersoanje, boolean boleaColision) {

    for (int i = obstaculos.size() - 1; i >= 0; i--) {

      if (this.obstaculos.get(i).golpeaJugador( xPersonaje, anchoPersonaje, yPersonaje, altoPersoanje, boleaColision)) {
        // Si el perosonaje  choca detener el juego
        return true;
      }
    }
    return false ;
  }
}


























class Iguana implements Obstaculo {
  float x, y; // Posición del gato
  float speed; // Velocidad de movimiento del gato
  boolean golpeaJugador= false;
  PImage ImgIguanaArbol;


  PImage popo;
  float xpopo, ypopo; // Posición del gato
  boolean moverPopo =false;
  float speedPopoX = random(-5, 10);
  float speedPopoY = random(1, 10);
  int AnchoPopo = 30, AltoPopo=22;


  // Constructor de la clase Iguana
  Iguana(float x, float y, float speed) {
    this.x = x;
    this.y = y;
    this.speed = speed;

    ImgIguanaArbol = loadImage("ObsIguana.png");
    ImgIguanaArbol.resize(400, 511);


    popo = loadImage("popo.png");
    popo.resize(PApplet.parseInt(AnchoPopo), AltoPopo);
  }

  // Método para actualizar la posición del gato
  public void update() {
    x -= speed; // Mover el gato hacia la izquierda

    if (x <= (width/2)+10 &&  x >= (width/2)-10 ) {
      moverPopo = true;
    }
  }


  public void display() {

    image(ImgIguanaArbol, x, y);

    if (moverPopo == false) {
      image(popo, x+180, y+150);
      xpopo = x+180;
      ypopo = y+150;
    } else {


      if (ypopo < 480 ) {

        xpopo -= speedPopoX;
        ypopo += speedPopoY;

        image(popo, xpopo, ypopo);
      }
    }
  }

  // Método para verificar si el gato golpea al personaje

  public boolean golpeaJugador (float xPersonaje, int anchoPersonaje, float yPersonaje, int altoPersonaje, boolean boleaColision) {

    if (boleaColision==false) {
      return (xPersonaje + anchoPersonaje - 20 >=   this.xpopo && xPersonaje+20 < this.xpopo + AnchoPopo    &&  (this.ypopo < yPersonaje+altoPersonaje && this.ypopo+AltoPopo > yPersonaje)  )   ;
    } else {
      return false;
    }
  }
}







class Gato implements Obstaculo {
  float x, y; // Posición del gato
  float speed; // Velocidad de movimiento del gato
  boolean golpeaJugador= false;
  PImage ImgGato ;

  int anchoGato = 72;
  int altoGato = 62;


  // Constructor de la clase gato
  Gato(float AnchoVentana, float AltoVentana, float speed) {
    this.x = AnchoVentana - anchoGato  ;
    this.y = AltoVentana - altoGato;
    this.speed = speed;



    ImgGato = loadImage("Gato.png");
    ImgGato.resize(anchoGato, altoGato);
  }

  // Método para actualizar la posición del gato
  public void update() {
    x -= speed; // Mover el gato hacia la izquierda
  }

  // Método para dibujar el gato en la pantalla
  public void display() {

    image(ImgGato, x, y);
  }

  // Método para verificar si el gato golpea al personaje
  public boolean golpeaJugador (float xPersonaje, int anchoPersonaje, float yPersonaje, int altoPersonaje, boolean boleaColision) {
    // Verificar si las coordenadas del obstaculo se superponen con las del personaje
    if (boleaColision==false) {
      if (xPersonaje + anchoPersonaje  -30 >=   this.x && xPersonaje+20 <= this.x + anchoGato    &&   yPersonaje + altoPersonaje > this.y) {
   
      delay(100);
      
      }
      return (xPersonaje + anchoPersonaje  -10 >=   this.x && xPersonaje+10 <= this.x + anchoGato    &&   yPersonaje + altoPersonaje > this.y)   ;
    } else {
      return false;
    }
  }
}




interface Obstaculo {
  void display();
  void update();
  boolean golpeaJugador(float xPersonaje, int anchoPersonaje, float yPersonaje, int altoPersoanje, boolean boleaColision );

  float x = 0;
  float y = 0;
}


class Jugador {

  int control;

  PImage Imagen;
  int Width_Personaje_Principal = 50;
  int Height_Personaje_Principal = 200;
  int grav=10;
  //para el sistema de movimiento
  boolean jumping1 = false;
  boolean rightKeyPressed1 = false;
  boolean leftKeyPressed1 = false;
  boolean jumping2 = false;
  boolean rightKeyPressed2 = false;
  boolean leftKeyPressed2 = false;

  //Posicion del Personaje
  float xpos = (width/2)/2 - (Width_Personaje_Principal/2);
  float ypos= suelo-Height_Personaje_Principal;



  Jugador(PImage Imagen, int controles) {
    
    this.xpos = (width/2)/2 - (Width_Personaje_Principal/2)+40*controles;

    this.Imagen  = Imagen;
    this.Imagen.resize(this.Width_Personaje_Principal, this.Height_Personaje_Principal);
    this.control= controles;
  }
  //desde acá empieza
  public void movimiento1() {
    // Movimiento horizontal
    if (rightKeyPressed1==true) {
      this.xpos = this.xpos+ speed;
    } else if (leftKeyPressed1) {
      this.xpos = this.xpos-speed;
    }

    // Aplicar gravedad
    if (this.ypos < suelo-Height_Personaje_Principal) {
      this.ypos =this.ypos+15;
    } else {
      this.ypos = suelo-Height_Personaje_Principal; // Asegurar que el personaje no atraviese el suelo
      jumping1 = false; // Detener el salto cuando toca el suelo
    }
  }
  public void movimiento2() {
    // Movimiento horizontal
    if (rightKeyPressed2==true) {
      this.xpos = this.xpos+ speed;
    } else if (leftKeyPressed2) {
      this.xpos = this.xpos-speed;
    }

    // Aplicar gravedad
    if (this.ypos < suelo-Height_Personaje_Principal) {
      this.ypos =this.ypos+ 15;
    } else {
      this.ypos = suelo-Height_Personaje_Principal; // Asegurar que el personaje no atraviese el suelo
      jumping2 = false; // Detener el salto cuando toca el suelo
    }
  }
  //acá termina la tortura
  public void draw() {


    image(this.Imagen, this.xpos, this.ypos );
    if (this.control == 0) {
      movimiento1();
    } else {
      movimiento2();
    }
  }

  public void keyPressed() {


    if (this.control == 0) {

      if (keyCode == 'd' || keyCode=='D') {
        this.rightKeyPressed1 = true;
      } else if (keyCode == 'a' || keyCode=='A') {
        this.leftKeyPressed1 = true;
      } else if (keyCode == 'w' || keyCode=='W' && !jumping1) {
        this.jumping1 = true;
        this.ypos -= 500; // Salto
      }
    } else {
      if (keyCode == RIGHT) {
        this.rightKeyPressed2 = true;
      } else if (keyCode == LEFT) {
        this.leftKeyPressed2 = true;
      } else if (keyCode == UP && !jumping2) {
        this.jumping2 = true;
        this.ypos -= 500; // Salto
      }
    }


    this.xpos = constrain(this.xpos, 0, width - this.Width_Personaje_Principal);
    this.ypos = constrain(this.ypos, 0, suelo - this.Height_Personaje_Principal);
  }
  public void keyReleased() {
    if (this.control == 0) {

      if (keyCode == 'd' || keyCode=='D') {
        this.rightKeyPressed1 = false;
      } else if (keyCode == 'A' || keyCode=='a') {
        this.leftKeyPressed1 = false;
      }
    } else {
      if (keyCode == RIGHT) {
        this.rightKeyPressed2 = false;
      } else if (keyCode == LEFT) {
        this.leftKeyPressed2 = false;
      }
    }

    this.xpos = constrain(this.xpos, 0, width - this.Width_Personaje_Principal);
    this.ypos = constrain(this.ypos, 0, suelo - this.Height_Personaje_Principal);
  }
}




class Coin {
  float x, y; // Posición del coin
  boolean TomaAgua= false;
  PImage ImgAgua;

  int anchoCoin = 26;
  int altoCoin= 47;
  int coinsRecaudadas = 0;




  // Constructor de la clase Coin
  Coin() {
    /* this.x = AnchoVentana - anchoGato  ;
     this.y = AltoVentana - altoGato;*/
    this.ImgAgua=  loadImage("coin.png");

    this.ImgAgua.resize(anchoCoin, altoCoin);

    this.x=random(0, 1200-anchoCoin-75);
    this.y=480-47;
  }




  // Método para dibujar el agua en la pantalla
  public void display() {
    image(ImgAgua, x, 480-altoCoin);
  }

  // Método para verificar si el gato golpea al personaje
  public void TomoAgua (float xPersonaje, int anchoPersonaje, float yPersonaje, int altoPersonaje) {


    if (xPersonaje + anchoPersonaje - 10 >=   this.x & xPersonaje+10 <= this.x + anchoCoin & yPersonaje + altoPersonaje >= this.y) {

      this.x=PApplet.parseInt(random(0, 1200-anchoCoin-30));
      this.coinsRecaudadas = this.coinsRecaudadas + 1;
      CoinRec=true;
      CoinPlaying=false;
      CoinRecogida();
      if (coinsRecaudadas%10==0){
        confirmar_vida=true;
      }
    }
  }
}
public void Escena_Creditos() { /////////////////////////////////////////////////////////////// CREDITOS
  credits = loadImage("creds.png");
  credits.resize(width, height);
  image(credits, 0, 0);
  atras = loadImage("atras.png");
  atras.resize(50, 50);
  image(atras, 1100, 10);
  adelante= loadImage("Adl.png");
  adelante.resize(120, 100);
  image(adelante, 5,5);
}
public void Escena_Creditos2() { /////////////////////////////////////////////////////////////// CREDITOS2
  credits2 = loadImage("creditos2.jpg");
  credits2.resize(width, height);
  image(credits2, 0, 0);
  atras = loadImage("atras.png");
  atras.resize(50, 50);
  image(atras, 1100, 10);

}
public void Elegir_Escenario () { /////////////////////////////////////////// SELECCION DEL ESCENARIO
  escenario[0] = loadImage("EscPrinc.jpg");
  background(escenario[0]);
  
  escenario[1] = loadImage("bbl.jpg"); // Biblioteca
  biblio = loadImage("bibliotecaEsc.png");
  float biblioX = 100;
  float biblioY = height / 6;
  float biblioW = 350;
  float biblioH = 200;
  
  escenario[2] = loadImage("cse.jpg"); // Casa estudio
  casa = loadImage("casaestudioEsc.png");
  float casaX = 450;
  float casaY = 300;
  float casaW = 350;
  float casaH = 200;
  
  escenario[3] = loadImage("blqj.jpg"); // Bloque J
  bloque = loadImage("bloquejEsc.png");
  float bloqueX = 800;
  float bloqueY = 100;
  float bloqueW = 350;
  float bloqueH = 200;
  
  esc[0] = "Elige donde quieres jugar!!";
  textSize(20);
  fill(0);
  text(esc[0], 500, 20);
  
  PImage[] imagenes ={biblio, casa, bloque};
  float[] posX ={biblioX, casaX, bloqueX};
  float[] posY ={biblioY, casaY, bloqueY};
  float[] ancho ={biblioW, casaW, bloqueW};
  float[] alto ={biblioH, casaH, bloqueH};
  
  ////////////// CAMBIAR FONDO DEPENDIENDO ESCENARIO
  if (mouseX >=casaX & mouseX <= casaX +casaW & mouseY>= casaY & mouseY <=casaY+casaH) {
      background(escenario[2]);
    } else if (mouseX >=biblioX & mouseX <= biblioX + biblioW & mouseY>= biblioY & mouseY <= biblioY+biblioH){
      background(escenario[1]);
    } else if (mouseX >=bloqueX & mouseX <= bloqueX + bloqueW & mouseY>= bloqueY & mouseY <= bloqueY+bloqueH){
      background(escenario[3]);
    }
  
  
  for (int i= 0; i< imagenes.length; i++) { //////// Recorro las imagenes
    float x= posX[i];
    float y= posY[i];
    float w= ancho[i];
    float h= alto[i];
   
    image(imagenes[i], x, y, w, h);
  }
  
  
  atras = loadImage("atras.png");
  atras.resize(50, 50);
  image(atras, 1100, 10);
}

SoundFile Menú, juego, coin, colision, click;
int speed=10;
PImage piso;
PImage []escenario = new PImage [4]; // posibles escenarios
PImage menu[] = new PImage [5];
int xmenu = 0, ymenu = 0; // Posicion en x y de la imagen menú
boolean Escena0 = true, Escena1 = false, Manual = false, Creditos = false, Personajes=false, Escena_MultiOnly=false,Escenarios=false, Recovery=false;
boolean Creditos2=false;
boolean izquierda = false, derecha = false;
boolean confirmar_vida=false;
PImage botones[]= new PImage[3];
PImage personaje[]= new PImage[3];
String a= "";
String b= "";
String esc[]= new String[5]; // Textos de la pantalla escenario
int sz2=40;
int cl1=PApplet.parseInt(random(256)); // color r
int cl2=PApplet.parseInt(random(256)); // color g
int cl3=PApplet.parseInt(random(256)); // color b
PImage atras, adelante;
PImage credits, credits2;
PImage escprincipal; // Escenario principal
PImage manual;
PImage fondo_menu;
PImage fondo2;
PImage jugador1;
PImage jugador2;
PImage biblio;
PImage casa;
PImage bloque;
boolean MusicaPlaying= false, CoinPlaying=false, CoinRec=false, ColisionPlaying=false, ColisionRec=false;
PImage [] animacion = new PImage[9];
String jose, alexander, sergio;

ArrayList<PImage> pprincipal = new ArrayList<PImage>(); // PersonajesSeleccionados Principal
String name_to_score="TR";

int CantJugadores = 0;
int Seleccionados = 0;

Escena_Juego E1 = new Escena_Juego();


Score S_Scores;

public void setup() {
  /* size commented out by preprocessor */;
PFont mono;
mono = createFont("PoetsenOne-Regular.ttf", 38);
textFont(mono);


 S_Scores =new Score();

iniciarMusicaMenu();

}



public void draw() {

  if (Escena0) { // Si está en el menú
  if (!MusicaPlaying) {
      iniciarMusicaMenu();
    }
    background(0,0,0);
    Escena_Menu();
    
  
  } else if (Escena1) { 
  detenerMusicaMenu();
  iniciarMusicaJuego();
  PFont mono;
  mono = createFont("PoetsenOne-Regular.ttf", 38);
  textFont(mono);
  
  E1.draw(); 
  
  if(CoinRec){
    CoinRecogida();
    CoinRec=false;
  }
   if(ColisionRec){
    ColisionSonido();
    ColisionRec=false;
  }
  

  } else if (Escenarios) {
    Elegir_Escenario();
    
  } else if (Personajes) { // Si está en la seleccion del personaje
    Escena_Personajes(Seleccionados);
  } else if (Manual) { // Si se muestra el manual
    Escena_Manual();
  } else if (Creditos) { // Se muestran los creditos
    Escena_Creditos();
  }else if (Creditos2) { // Se muestran los creditos
    Escena_Creditos2();
  }else if (Escena_MultiOnly){
  background(255,255,255);
  pregunta();
  }
}



public void mousePressed() {
    println("X ES:", mouseX);
    println("Y ES:", mouseY);

  if (Escena0) { // Si está en la escena del menú
    if (mouseX > 0 && mouseX < 400 && mouseY > 0 && mouseY < 100) {
      Escena0 = false;
      Escenarios = true;
      click();
      
    } else if (mouseX > 400 & mouseX < 800 && mouseY > 0 & mouseY < 100) {
      Escena0 = false;
      Manual = true;
      click();
    } else if (mouseX > 800 && mouseX < 1200 & mouseY > 0 && mouseY < 100) {
      Escena0 = false;
      Creditos = true;
      click();
    }
  }else if (Escenarios) { // SI ESTOY EN EL MENU ESCENARIOS
   if (mouseX>1094 & mouseX<1157 & mouseY>10 & mouseY<61) { // VOY ATRAS
      Escenarios= false;
      Escena0=true;
      click();
    }else if (mouseX>97 & mouseX<437 & mouseY>98 & mouseY<291) { // Escenario biblioteca
      Escenarios= false;
      Escena_MultiOnly=true;
      //Personajes=true;
      escprincipal= escenario[1];
      click();
    }else if (mouseX>454 & mouseX<798 & mouseY>299 & mouseY<497) { // Escenario Casa estudio
      Escena_MultiOnly=true;
      Escenarios= false;
      //Personajes=true;
      escprincipal= escenario[2];
      click();
 
    }else if (mouseX>800 & mouseX<1147 & mouseY>98 & mouseY<297) { // Escenario Bloque J
      Escenarios= false;
      Escena_MultiOnly=true;
      //Personajes=true;
      escprincipal= escenario[3];
      click();
    }
  
  }else if (Personajes) { // SI ESTOY SELECCIONANDO PERSONAJES
 
    if (mouseX>34 & mouseX<124 & mouseY>50 & mouseY<290) { // SELECCIONAR PERSONAJE DE JOSE
      if(CantJugadores==1){
     name_to_score="Jose";
    }
      pprincipal.add(personaje[0]);
      Seleccionados +=1;
      click();
    } else if (mouseX>420 & mouseX<519 & mouseY>50 & mouseY<290) { // SELECCIONAR PERSONAJE DE ALEXANDER
      if(CantJugadores==1){
      name_to_score="Alexander";
    }
      pprincipal.add(personaje[1]);
      Seleccionados +=1;
      click();

    } else if (mouseX>806 & mouseX<918 & mouseY>50 & mouseY<290) { // SELECCIONAR PERSONAJE DE SERGIO
      if(CantJugadores==1){
      name_to_score="Sergio";
    }
      pprincipal.add(personaje[2]);
      Seleccionados +=1;
      click();
    } else if (mouseX>1094 & mouseX<1157 & mouseY>10 & mouseY<61) { // VOY ATRAS
      Personajes= false;
      Escena_MultiOnly=true;
      click();
    }
    
  
    if (Seleccionados == CantJugadores) {
      Personajes= false;
      Escena1=true;
      E1.setEscenario(escprincipal);
      E1.setPersonaje(pprincipal);
    }
    
  }else if (Creditos) {
    if (mouseX>1094 & mouseX<1157 & mouseY>10 & mouseY<61) { // VOY ATRAS
      Creditos= false;
      Escena0=true;
      click();
    } else if (mouseX>120 & mouseX<578 & mouseY>158 & mouseY<219) {
      link("https://www.alamy.es/puente-de-diversos-derechos-hombre-gente-saltando-stick-figura-stickman-pictograma-iconos-image214760025.html");
    } else if (mouseX>118 & mouseX<303 & mouseY>272 & mouseY<293) {
      link("https://co.pinterest.com/pin/431501208058226263/");
    } else if (mouseX>120 & mouseX<628 & mouseY>328 & mouseY<365) {
      link("https://www.shutterstock.com/es/image-vector/stickman-icon-stick-figure-man-person-2311274885");
    } else if (mouseX>118 & mouseX<621 & mouseY>423 & mouseY<469) {
      link("https://www.elparquedelosdibujos.com/dibujos/dibujos-de-animales/dibujos-de-gatos/dibujos-de-gatos.php");
    } else if (mouseX>114 & mouseX<626 & mouseY>516 & mouseY<542) {
      link("https://www.istockphoto.com/es/ilustraciones/iguana");
    } else if (mouseX>831 & mouseX<1024 & mouseY>310 & mouseY<368) {
      link("https://hoopgame.net/play/Sonic-the-Hedgehog");
    } else if (mouseX>715 & mouseX<1109 & mouseY>431 & mouseY<545) {
      link("https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.freepik.es%2Ffotos-vectores-gratis%2Fpergamino&psig=AOvVaw1AkY8kXMf75bUwEn9a50jh&ust=1713975048870000&source=images&cd=vfe&opi=89978449&ved=0CBIQjRxqFwoTCIiJ_ePc2IUDFQAAAAAdAAAAABAE");
    } else if (mouseX>38 & mouseX<93 & mouseY>26 & mouseY<75) { // VOY A LOS CREDITOS 2
      Creditos= false;
      Creditos2=true;
      click();
    }
  }else if(Creditos2){
    if (mouseX>1094 & mouseX<1157 & mouseY>10 & mouseY<61) { // VOY ATRAS
      Creditos2= false;
      Creditos=true;
      click();
    } else if (mouseX>164 & mouseX<655 & mouseY>158 & mouseY<173) {
      link("https://www.youtube.com/watch?v=YV2MhItwEk8");
    } else if (mouseX>167 & mouseX<657 & mouseY>229 & mouseY<247) {
      link("https://www.youtube.com/watch?v=sj8Ar0o4Z7k");
    } else if (mouseX>166 & mouseX<655 & mouseY>301 & mouseY<318) {
      link("https://www.youtube.com/watch?v=3t4MduIPW_0");
    } else if (mouseX>166 & mouseX<655 & mouseY>375 & mouseY<392) {
      link("https://www.youtube.com/watch?v=1FpStbIrcUE");
    } else if (mouseX>166 & mouseX<655 & mouseY>446 & mouseY<461) {
      link("https://www.youtube.com/watch?v=do5DHs9VGSw");
    } else if (mouseX>811 & mouseX<1114 & mouseY>177 & mouseY<217) {
      link("https://www.pngwing.com/es/free-png-maupq");
    } 
    
  }else if(Manual){
    if (mouseX>1094 & mouseX<1157 & mouseY>10 & mouseY<61) { // VOY ATRAS
      Manual=false;
      Escena0=true;
      click();
    }
    
  }else if(Escena_MultiOnly){ ////////////////////////////////////////////////////////////SI ESTOY SELECCIONANDO 1 O 2 JUGADORES 
  
    if (mouseX>401 & mouseX<798 & mouseY>137 & mouseY<229) { //////////// 1 JUGADOR
      Escena_MultiOnly= false;
      Personajes=true;
      CantJugadores=1;
      click();
    } else if (mouseX>400 & mouseX<800 & mouseY>298 & mouseY<400) { /////// 2 JUGADORES
      Escena_MultiOnly = false;
      Personajes=true;
      CantJugadores=2;
      click();
    } else if (mouseX>1094 & mouseX<1157 & mouseY>10 & mouseY<61) { // VOY ATRAS
      Escena_MultiOnly= false;
      Escenarios=true;
      click();
    }
      
  }
  

}



public void keyPressed() {
  
   if (Escena1) {
       E1.keyPressed();
    }
    
   if (Recovery == true ){
   if(keyCode == 'K' || keyCode == 'k'){
   exit();
   
   }
   
      if(keyCode == 'R' || keyCode == 'r'){
        background(0,0,0);
      E1 = new Escena_Juego();
       E1.setEscenario(escprincipal);
       E1.setPersonaje(pprincipal);
       Recovery = false;
       Escena1=true;
   }
     
   }
    
  }





public void keyReleased() {
  if (Escena1) {
   if (Escena1) {
       E1.keyReleased();
    }
  }
}
public void Escena_Manual() { ////////////////////////////////////////////////////////////////// MANUAL
manual=loadImage("manualsi1.jpg");
manual.resize(1200,600);
image(manual, 0, 0);
atras = loadImage("atras.png");
  atras.resize(50, 50);
  image(atras, 1100, 10);
}
public void Escena_Menu() { ///////////////////////////////7 ESCENA DEL MENU
  sz2 = sz2 + 15;
  cl1 = cl1 + 10;
  cl2 = cl2 + 10;
  cl3 = cl3 + 10;

  if (sz2 > width) {
    sz2 = 0;
  }
  if (cl1 > 256) {
    cl1 = 0;
  }
  if (cl2 > 256) {
    cl2 = 0;
  }
  if (cl3 > 256) {
    cl3 = 0;
  }

  menu[0] = loadImage("EscPrinc.jpg");
  image(menu[0], xmenu, ymenu);
  
  menu[1]= loadImage("cse.jpg");
  
  if (mouseX >= sz2 && mouseX <= sz2 + textWidth(b) && mouseY >= height/2 - 50 && mouseY <= height/2 + 50) {
    image(menu[1], xmenu, ymenu); ///// SI ESTA SOBRE UNITRAVESIA CAMBIAR FONDO
  } else {
    image(menu[0], xmenu, ymenu); // Sino usamos la imagen de fondo original
  }

  botones[0] = loadImage("Boton_comenzar.png");
  botones[0].resize(width/3, 100);
  if (mouseX >= xmenu && mouseX <= xmenu + width/3 && mouseY >= ymenu && mouseY <= ymenu + 100) {
    tint(255, 150);
  } else {
    noTint();
  }
  image(botones[0], xmenu, ymenu);

  botones[1] = loadImage("Boton_manual.png");
  botones[1].resize(width/3, 100);
  if (mouseX >= width/3 && mouseX <= width/3 + width/3 && mouseY >= ymenu && mouseY <= ymenu + 100) {
    tint(255, 150);
  } else {
    noTint();
  }
  image(botones[1], width/3, ymenu);

  botones[2] = loadImage("Boton_creditos.png");
  botones[2].resize(width/3, 100);
  if (mouseX >= width-width/3 && mouseX <= width && mouseY >= ymenu && mouseY <= ymenu + 100) {
    tint(255, 150);
  } else {
    noTint();
  }
  image(botones[2], width-width/3, ymenu);

  b = "UNITRAVESÍA";
  fill(cl1, cl2, cl3);
  if (mouseX >= sz2 && mouseX <= sz2 + textWidth(b) && mouseY >= height/2 - 50 && mouseY <= height/2 + 50) {
    fill(cl1, cl2, cl3, 150);
  }
  textSize(100);
  text(b, sz2, height/2);
  
  
  Score Scores = new Score();
  Scores.Display();
  
  
  
}
public void pregunta(){ ///////////////////////////////////////////////////////PREGUNTA SI 1 O 2 JUGADORES
  background(0,0,0);
  fondo2=loadImage("fondo2.jpg");
  image(fondo2, 0, 0, width, height);
  textSize(40);
  jugador1=loadImage("OnlyPlayer.png");
  jugador2=loadImage("MultiPlayer.png");
  image(jugador2, width/3, height/2,400,100);
  image(jugador1, width/3, height/4.5f,400,100);
   atras = loadImage("atras.png");
  atras.resize(50, 50);
  image(atras, 1100, 10);
  
}
public void Escena_Personajes(int NumPer) {
  
  float suelo  = 300; // Posición del suelo 
  
  cl1=cl1+10;
  cl2=cl2+10;
  cl3=cl3+10;
  if (cl1>256) {
    cl1=0;
  }
  if (cl2>256) {
    cl2=0;
  }
  if (cl3>256) {
    cl3=0;
  }

  fondo_menu=loadImage("azuldegradado.jpg");
  image(fondo_menu, 0, 0, width, height);
  
  a= "Escoje el jugador "+(NumPer+1)+"! :)";

  personaje[0]= loadImage("Jose.png");
  personaje[1]= loadImage("Alexander.png");
  personaje[2]= loadImage("Sergio.png");
  
  animacion[0]=loadImage("josecorriendoderecha1.png");
  animacion[1]=loadImage("josecorriendoizquierda1.png");
  animacion[2]=loadImage("josesaltando1.png");
  animacion[3]=loadImage("alexandercorriendoderecha1.png");
  animacion[4]=loadImage("alexandercorriendoizquierda1.png");
  animacion[5]=loadImage("alexandersaltando1.png");
  animacion[6]=loadImage("sergiocorriendoderecha1.png");
  animacion[7]=loadImage("sergiocorriendoizquierda1.png");
  animacion[8]=loadImage("sergiosaltando1.png");
  piso = loadImage("suelo11.png");
  piso.resize(1200, 300);
  image(piso, 0, suelo);
  text(a, 400, 440);
  textSize(34);
  fill(cl1, cl2, cl3);
  atras = loadImage("atras.png");
  atras.resize(50, 50);
  image(atras, 1100, 10);
 
  image(personaje[0], 0, 0);
  image(personaje[1], width/3, 0);
  image(personaje[2], width-width/3, 0);

}
class Score{

  String Nombres_Displays[]= new String[3];
  int  Scores[]= new int[3];
  int i = 0;
  
  Score (){
   String[] lineas = loadStrings("BaseDatos.txt");
  for (String linea : lineas) {

    String linea1 = split(linea, ",")[0];
    Nombres_Displays[i]= linea1;
    String linea2 = split(linea, ",")[1];
    Scores[i]= PApplet.parseInt(linea2);
    this.i +=1;

  }
  
  this.i=0;
 
  
  }
  
  

  
  PImage tabla = loadImage("tabla.png");
  

  
  public void Display (){
  String[] lineas = loadStrings("BaseDatos.txt");
  for (String linea : lineas) {

    String linea1 = split(linea, ",")[0];
    Nombres_Displays[i]= linea1;
    String linea2 = split(linea, ",")[1];
    Scores[i]= PApplet.parseInt(linea2);
    this.i +=1;

  }
  this.i=0;
 
    
    
    
    ordenar();
    
  tabla.resize(450,180);
   image(tabla, /*375*/width-450-10,384);
   textSize(20);
  
  int n = Scores.length;
  for (int i = 0; i <= n-1; i++) {
    
    fill(255,255,255);
   
    

    text(Nombres_Displays[i], width-450+75-10, 455+40*(i%3));
    text(Scores[i], width-450+315-10, 455+40*(i%3));
  }
  
  }

 
  public void ordenar(){
    
    int n = Scores.length;
    for (int i = 0; i < n-1; i++) {
      for (int j = 0; j < n-i-1; j++) {
        if (Scores[j]<  Scores[j+1]) {
        int copia = Scores[j];
        Scores[j] = Scores[j+1];
        Scores[j+1] = copia;
        
        String copiaNombre = Nombres_Displays[j];
        Nombres_Displays[j] = Nombres_Displays[j+1];
        Nombres_Displays[j+1] = copiaNombre;
        
        }}}

  }
  
  public void actualizar( String name,int N_Coin){
    
    int n = Scores.length;
    for (int i = 0; i <= n-1; i++) {
      println(EliminarEspacios(Nombres_Displays[i]));
      println(name);
      if (EliminarEspacios(Nombres_Displays[i]).equals(name)){
        println("ggggggg");
        Scores[i]=N_Coin;
        println("ggggggg", Scores[i]);
      }}
      
      ordenar();
      
      println(Scores);
      println(Nombres_Displays);
      
      
      
      
      
  PrintWriter writer = createWriter("BaseDatos.txt");
  

  
      for (int i = 0; i < n; i++) {
        println(Nombres_Displays[i]+","+Scores[i],"rrrrrrrrrrrrrrrr");
         writer.println(Nombres_Displays[i]+","+Scores[i]);
     }
 
  
 
  writer.flush(); 
  writer.close();
  
    
  }
  
  public String EliminarEspacios(String palabra) {
  int j = 0;
  while (j  < palabra.length() && palabra.charAt(j) == ' ') {
    j++;
  }
  println(palabra.substring(j)=="Alexander");
  return palabra.substring(j);
}
  
  
  
  
  
  

  



}
public void iniciarMusicaMenu() {
  Menú = new SoundFile(this, "MenuCancion.mp3");
  Menú.amp(0.3f); // Volumen
  Menú.rate(1); // Velocidad
  Menú.loop();
  MusicaPlaying = true;
}

public void detenerMusicaMenu() {
  if (MusicaPlaying) {
    Menú.stop();
    MusicaPlaying = false;
  }
}

public void iniciarMusicaJuego() {
  if (juego == null) {
    juego = new SoundFile(this, "MarioCanción.mp3");
    juego.amp(0.3f); // Volumen
    juego.rate(1); // Velocidad
    juego.loop();
  }
}

public void CoinRecogida() {
  if(!CoinPlaying){
 coin = new SoundFile(this, "SonidoCoin.mp3");
 coin.amp(0.1f); // Volumen
 coin.rate(1); // Velocidad
 coin.play();
 CoinPlaying=true;
  }
}

public void ColisionSonido() {
  if(!ColisionPlaying){
 colision = new SoundFile(this, "SonidoExplosion.mp3");
 colision.amp(0.3f); // Volumen
 colision.rate(1); // Velocidad
 colision.play();
 ColisionPlaying=true;
  }
}

public void click (){
  click = new SoundFile(this, "SonidoGolpe.mp3");
 click.amp(0.3f); // Volumen
 click.rate(1); // Velocidad
 click.play();
  
}


  public void settings() { size(1200, 600); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Juego" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
